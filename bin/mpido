#!/bin/bash

VERBOSE=1
if [ "$1" = "-v" ];then
shift
VERBOSE=0
fi

if ! which mpirun >/dev/null 2>/dev/null;then
if [ 0 -eq $VERBOSE ];then echo -e module load openmpi; fi
module load openmpi >/dev/null 2>/dev/null
if ! which mpirun >/dev/null 2>/dev/null;then
echo mpirun is not found
exit 1
fi
fi

if [ -z "$HOSTLIST" ];then
if [ -z "$SGE_JOB_HOSTLIST" ];then
echo -e HOSTLIST is not defined
exit 1
fi
HOSTLIST="$SGE_JOB_HOSTLIST"
fi

if [ -z "$MPIDO_POOL" ];then
MPIDO_POOL="/tmp/mpido_pool.$(echo $HOSTLIST | md5sum | sed -e 's/ .*$//')"
fi
MPIDO_POOL_LOCK="${MPIDO_POOL}.lock"

if [ "$1" = "-c" ];then
rm "$MPIDO_POOL"
echo -e "MPIDO_POOL($MPIDO_POOL) is removed"
exit 0
fi

hosts(){
cat "$HOSTLIST" | sed -e '/^$/d'
}
HOST_SIZE=$(hosts | wc -l)

job_num(){
echo $(($(cat "$MPIDO_POOL" | grep "^+$1$" | wc -l) - $(cat "$MPIDO_POOL" | grep "^-$1$" | wc -l)))
}

release_lock(){
rm -rf "$MPIDO_POOL_LOCK" 2>/dev/null
}

aquire_lock(){
if [ $(($(date '+%s')0 - $(stat -c '%Z' \"$MPIDO_POOL_LOCK\" 2>/dev/null)0)) -gt 100 ];then
release_lock
sleep 0.$RANDOM
fi
while ! mkdir "$MPIDO_POOL_LOCK" 2>/dev/null;do
sleep 0.00$RANDOM
done
}

suggest_host(){
aquire_lock
if [ ! -e "$MPIDO_POOL" ];then
touch "$MPIDO_POOL"
fi
CANDIDATES="$(hosts | head -n 1)"
ORGIFS=$IFS
IFS=$'\n'
for h in $(hosts | tail -n +2);do
if [ $(job_num "$h") -lt $(job_num "$CANDIDATES") ];then
CANDIDATES="$h"
fi
done
echo "+$CANDIDATES" >> "$MPIDO_POOL"
release_lock
IFS=$ORGIFS
echo "$CANDIDATES"
}

if [ $HOST_SIZE -le 1 ];then
if [ 0 -eq $VERBOSE ];then echo -e "mpido> " $*; fi
$@
else
SUGGESTED=$(suggest_host)
if [ 0 -eq $VERBOSE ];then echo -e "mpido> " mpirun --host "$SUGGESTED" $*; fi
mpirun --host "$SUGGESTED" "$@"
echo "-$SUGGESTED" >> "$MPIDO_POOL"
fi


